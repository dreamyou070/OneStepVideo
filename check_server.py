#!/bin/bash

# Initialize maximum length variables
max_partition_length=0
max_node_name_length=0
max_gpu_name_length=0
max_gpu_status_length=0

# Declare an array to store node information
declare -a node_info

# First pass: calculate maximum lengths and store node information
while IFS= read -r line; do
    if [[ "$line" =~ NodeName=([^ ]+) ]]; then
        node_name="${BASH_REMATCH[1]}"
        # Update max_node_name_length if necessary
        if (( ${#node_name} > max_node_name_length )); then
            max_node_name_length=${#node_name}
        fi
    fi
    if [[ "$line" =~ Partitions=([^ ]+) ]]; then
        partition="${BASH_REMATCH[1]}"
        # Update max_partition_length if necessary
        if (( ${#partition} > max_partition_length )); then
            max_partition_length=${#partition}
        fi
    fi
    if [[ "$line" =~ Gres=gpu:([^:]+):([0-9]+) ]]; then
        gpu_name="${BASH_REMATCH[1]}"
        gpu_max="${BASH_REMATCH[2]}"
        # Update max_gpu_name_length if necessary
        if (( ${#gpu_name} > max_gpu_name_length )); then
            max_gpu_name_length=${#gpu_name}
        fi
        # Calculate GPU status length
        gpu_status="${gpu_name} ${gpu_max}/${gpu_max}"
        if (( ${#gpu_status} > max_gpu_status_length )); then
            max_gpu_status_length=${#gpu_status}
        fi
    fi
done < <(scontrol show nodes)

center_align() {
    local text="$1"
    local length="$2"
    local padding=$(( (length - ${#text}) / 2 ))
    printf "%*s%s%*s" $padding "" "$text" $padding ""
    if (( (length - ${#text}) % 2 != 0 )); then
        printf " "
    fi
}

left_align() {
    local text="$1"
    local length="$2"
    printf "%-*s" $length "$text"
}

right_align() {
    local text="$1"
    local length="$2"
    printf "%*s" $length "$text"
}

process_node_info() {
    local node_name="$1"
    local node_state="$2"
    local gpu_name="$3"
    local gpu_alloc="$4"
    local gpu_max="$5"
    local partition="$6"
    local gpu_remain=$((gpu_max - gpu_alloc))

    if [[ -n "$gpu_name" ]] && \
        (( gpu_max > gpu_alloc )) && \
        !([[ $node_name =~ login ]]) && \
        !([[ $node_name =~ test ]]) && \
        !([[ $partition =~ test ]]) && \
        !([[ $node_state =~ ALLOCATED ]]) && \
        !([[ $node_state =~ DOWN* ]]); then
        node_info+=("$partition,$node_name,$gpu_name,$gpu_remain,$gpu_max,$node_state")
    fi
}

# Second pass: format output
while IFS= read -r line; do
    if [[ "$line" =~ NodeName=([^ ]+) ]]; then
        node_name="${BASH_REMATCH[1]}"
        gpu_name=""
        gpu_alloc=0
        gpu_max=0
        node_state=""
        partition=""
    fi
    if [[ "$line" =~ Gres=gpu:([^:]+):([0-9]+) ]]; then
        gpu_name="${BASH_REMATCH[1]}"
        gpu_max="${BASH_REMATCH[2]}"
    fi
    if [[ "$line" =~ AllocTRES=.*gres/gpu=([0-9]+) ]]; then
        gpu_alloc="${BASH_REMATCH[1]}"
    fi
    if [[ "$line" =~ State=([^ ]+) ]]; then
        node_state="${BASH_REMATCH[1]}"
        node_state=$(echo "$node_state" | cut -d'+' -f1)
    fi
    if [[ "$line" =~ Partitions=([^ ]+) ]]; then
        partition="${BASH_REMATCH[1]}"
    fi
    if [[ -z "$line" ]]; then
        process_node_info "$node_name" "$node_state" "$gpu_name" "$gpu_alloc" "$gpu_max" "$partition"
    fi
done < <(scontrol show nodes)

# Sort the node information by partition name
IFS=$'\n' sorted_node_info=($(printf "%s\n" "${node_info[@]}" | sort -t, -k1,1))
unset IFS

# Variables to track previous partition
prev_partition=""

# Calculate the length for the separator line
separator_length=$((max_partition_length + 3 + max_node_name_length + 3 + max_gpu_status_length + 3 + 6)) # 3 spaces for each separator and state
separator=$(printf '%*s' $separator_length | tr ' ' '-')

# Output the sorted node information
echo "$separator"
for info in "${sorted_node_info[@]}"; do
    IFS=',' read -r partition node_name gpu_name gpu_remain gpu_max node_state <<< "$info"
    gpu_status="$(left_align "$gpu_name" $max_gpu_name_length) $(right_align "$gpu_remain/$gpu_max" $((${#gpu_remain}+1+${#gpu_max})))"
    if [[ "$partition" == "$prev_partition" ]]; then
        printf "%s | %s | %s | %s\n" \
            "$(center_align "$node_name" $max_node_name_length)" \
            "$(center_align "" $max_partition_length)" \
            "$gpu_status" \
            "$node_state"
    else
        # Print a separator line when the partition changes
        if [[ -n "$prev_partition" ]]; then
            echo "$separator"
        fi
        printf "%s | %s | %s | %s\n" \
            "$(center_align "$node_name" $max_node_name_length)" \
            "$(center_align "$partition" $max_partition_length)" \
            "$gpu_status" \
            "$node_state"
    fi
    prev_partition="$partition"
done
echo "$separator"

# generated by ChatGPT-4o
